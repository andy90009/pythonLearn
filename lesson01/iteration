
# 如果给定一个list或tuple，我们可以通过for循环来遍历这个list或tuple，这种遍历我们称为迭代（Iteration）

# 因为Python的for循环不仅可以用在list或tuple上，还可以作用在其他可迭代对象上。

# list这种数据类型虽然有下标，但很多其他数据类型是没有下标的。
# 但是，只要是可迭代对象，无论有无下标，都可以迭代，比如dict就可以迭代

d = {'a': 1, 'b': 2, 'c': 3}

for key in d:
    print (key)

# 默认情况下，dict迭代的是key。
# 如果要迭代value，可以用for value in d.values()
# 如果要同时迭代key和value，可以用for k, v in d.items()

for value in d.values():
    print (value)

for key, value in d.items():
    print (key, value)

# 如何判断一个对象是否可迭代

from collections.abc import Iterable

print (isinstance('abc', Iterable))
print (isinstance([1,2,3], Iterable))
print (isinstance(123,Iterable))

# 如果要对list实现类似Java那样的下标循环怎么办？
# Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身

for i,value in enumerate(['a','b','c']):
    print (i,value)

# 请使用迭代查找一个list中最小和最大值，并返回一个tuple

def findMinAndMax(L):
    max = ''
    min = ''
    print ('max:', max, 'min:', min)
    if len(L) == 0:
        max = None
        min = None
    else:
        for index, value in enumerate(L):
            if not max and not min:
                min = L[0]
                max = L[0]
            else:
                if max < value:
                    max = value
                elif min > value:
                    min = value
    return min, max

print (findMinAndMax([]))
print (findMinAndMax([1, 2, 3, 4, 5, 6]))

'''
总结：
我们已经知道，可以直接作用于for循环的数据类型有以下几种：
一类是集合数据类型，如list、tuple、dict、set、str等；
一类是generator，包括生成器和带yield的generator function。
这些可以直接作用于for循环的对象统称为可迭代对象：Iterable
'''

# 可以使用isinstance()判断一个对象是否是Iterable对象
from collections.abc import Iterable

print (isinstance([], Iterable))
print (isinstance({}, Iterable))
print (isinstance('abc', Iterable))
print ( isinstance( (x for x in range(1,10) ), Iterable ) )
print (isinstance(100,Iterable))

# 而生成器不但可以作用于for循环，还可以被next()函数不断调用并返回下一个值，
# 直到最后抛出StopIteration错误表示无法继续返回下一个值了
# 可以被next()函数调用并不断返回下一个值的对象称为迭代器：Iterator
# 可以使用isinstance()判断一个对象是否是Iterator对象
from collections.abc import Iterator

print (isinstance((x for x in range(1,10)),Iterator))
print (isinstance([],Iterator))
print (isinstance({},Iterator))
print (isinstance('abc',Iterator))

# 生成器都是Iterator对象，但list、dict、str虽然是Iterable，却不是Iterator。
# 把list、dict、str等Iterable变成Iterator可以使用iter()函数

print (isinstance(iter([]),Iterator))
print (isinstance(iter({}),Iterator))

# 为什么list、dict、str等数据类型不是Iterator？
# 这是因为Python的Iterator对象表示的是一个数据流，
# Iterator对象可以被next()函数调用并不断返回下一个数据，直到没有数据时抛出StopIteration错误。
# 可以把这个数据流看做是一个有序序列，但我们却不能提前知道序列的长度，
# 只能不断通过next()函数实现按需计算下一个数据，所以Iterator的计算是惰性的，只有在需要返回下一个数据时它才会计算。
#
# Iterator甚至可以表示一个无限大的数据流，例如全体自然数。而使用list是永远不可能存储全体自然数的

# Python的for循环本质上就是通过不断调用next()函数实现的

for x in [1,2,3,4,5]:
    print ('for循环:', x)
    pass

# 等价于

it = iter([1,2,3,4,5])
while True:
    try:
        # 获取下一个值
        x = next(it)
        print ('iter:', x)
    except StopIteration:
        # 遇到StopIteration就退出循环
        break
